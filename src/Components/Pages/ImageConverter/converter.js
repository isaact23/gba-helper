let fileSaver = require("file-saver");

/**
 * Given an array of the RGB values of an image and a conversion mode,
 * generate a header file formatted for GBA.
 */
export function convert(pixels, mode, filename) {
    let dimensions = pixels.shape.slice();

    try {
        // Store output text
        let text = "// Generated by gbahelper.com\n";

        // Perform mode-dependent conversion
        if (mode === "bitmapRaw") {
            text += "// Conversion mode: Bitmap without Palette (32,768 colors)\n\n";
            text += "#include <stdint.h>\n\n"
            text += "#define " + filename + "_width " + dimensions[0] + "\n";
            text += "#define " + filename + "_height " + dimensions[1] + "\n\n";
            text += "const uint16_t " + filename + "_data[] = {\n";

            // Iterate through all pixels, left to right, then top to bottom
            for (let y = 0; y < dimensions[1]; y++) {
                text += "\t";
                for (let x = 0; x < dimensions[0]; x++) {
                    // Convert RGB to GBA-formatted hex
                    let r = pixels.get(x, y, 0) >> 3;
                    let g = pixels.get(x, y, 1) >> 3;
                    let b = pixels.get(x, y, 2) >> 3;
                    let color = (b + (g * 32) + (r * 1024));
                    let hex = "0x" + color.toString(16).padStart(4, "0");
                    text += hex + ", ";
                }
                text += "\n";
            }
            text += "}";
        }

        // Save text to file
        let blob = new Blob([text], {type: "text/h;charset=utf-8"});
        fileSaver.saveAs(blob, filename + ".h");

    } catch (e) {
        window.alert("Error during conversion: " + e.message);
    }
}
